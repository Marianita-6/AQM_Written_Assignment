# -*- coding: utf-8 -*-
"""
Created on Mon May 15 11:07:34 2023

@author: Teresa Nguyen
"""
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller


Indices = pd.read_excel('DATA Refinitiv.xlsx')
Macro_data = pd.read_excel('Stationarity Test Macro Data.xlsx')
#pd.to_datetime(Indices['Calc Date'])

Indices['Stoxx'].plot()
Indices['S&P 500'].plot()
Indices['Dow Jones Industria'].plot()
Indices['Bovespa Index'].plot()
Indices['Russell 2000'].plot()
Indices['FTSE 100'].plot()
Indices['Hang Seng Index'].plot()
Indices['NASDAQ-100'].plot()
Indices['DAX '].plot()
Indices['CAC 40'].plot()

Macro_data['CPI'].plot()
Macro_data['EMP_US'].plot()
Macro_data['Import in P. US'].plot()
Macro_data['UNEMP_US'].plot()
Macro_data['Retail'].plot()
Macro_data['INT. TRADE'].plot()
Macro_data['INDST_Prod'].plot()
Macro_data['MONEY SUPPLY'].plot()
Macro_data['TREASURY'].plot()
Macro_data['PROD_Energy'].plot()
Macro_data['GDP'].plot()

df = Indices
df2= Macro_data
# Check the dimensionality of the dataset
df.shape
df2.shape
print("Dataset has {} records and {} columns".format(df.shape[0], df.shape[1]))
print("Dataset has {} records and {} columns".format(df2.shape[0], df2.shape[1]))

# Changing the YEAR data type and setting it as index

df['Monthly Date'] = pd.Index(df['Calc Date'])
df2['Monthly Date'] = pd.Index(df2['TIMESTAMP'])
df.index = df['Monthly Date']
df2.index = df2['Monthly Date']
# Check the data type
del df['Monthly Date']
del df['Calc Date']
df
del df2['Monthly Date']
del df2['TIMESTAMP']
df2
# View the dataset
df.head()
df2.head()
# Plotting the Data
# Define the plot size
plt.figure(figsize=(16,5))
# Plot the data
plt.plot(df.index, df['Stoxx'], label = "Stoxx")
plt.legend(loc='best')
plt.title("Stoxx Data from monthly between 2013 to 2023")
plt.show()

plt.plot(df2.index, df2['CPI'], label = "CPI")
plt.legend(loc='best')
plt.title("CPI Data from monthly between 2013 to 2023")
plt.show()

# ADF Test
# Function to print out results in customised manner
def adf_test(timeseries):
    print ('Results of Dickey-Fuller Test:')
    dftest = adfuller(timeseries, autolag='AIC')
    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])
    for key,value in dftest[4].items():
        dfoutput['Critical Value (%s)'%key] = value
    print (dfoutput)
# Call the function and run the test
#Interpretation: 
#The p-value obtained is greater than the significance level of 0.05, and the ADF statistic is higher than any of the critical values

adf_test(df['Stoxx'])#stationär
adf_test(df['S&P 500'])#stationär
adf_test(df['Dow Jones Industria'])#stationär
adf_test(df['Bovespa Index'])#stationär
adf_test(df['Russell 2000'])#stationär
adf_test(df['FTSE 100'])#stationär
adf_test(df['Hang Seng Index'])#stationär
adf_test(df['NASDAQ-100'])#stationär
adf_test(df['DAX '])#stationär
adf_test(df['CAC 40'])#stationär -> critical value is lower than the test statistic

df2=df2.dropna()
adf_test(df2['CPI'])
adf_test(df2['EMP_US'])
adf_test(df2['Import in P. US'])
adf_test(df2['UNEMP_US'])
adf_test(df2['Retail'])
adf_test(df2['INT. TRADE'])#stationär
adf_test(df2['INDST_Prod'])
adf_test(df2['MONEY SUPPLY'])#stationär
adf_test(df2['TREASURY'])#stationär
adf_test(df2['PROD_Energy'])
adf_test(df2['GDP'])
